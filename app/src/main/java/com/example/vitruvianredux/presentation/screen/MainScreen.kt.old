package com.example.vitruvianredux.presentation.screen

import android.Manifest
import android.os.Build
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import com.example.vitruvianredux.domain.model.ConnectionState
import com.example.vitruvianredux.domain.model.WorkoutMode
import com.example.vitruvianredux.domain.model.WorkoutParameters
import com.example.vitruvianredux.domain.model.WorkoutState
import com.example.vitruvianredux.presentation.viewmodel.MainViewModel
import com.google.accompanist.permissions.ExperimentalPermissionsApi
import com.google.accompanist.permissions.rememberMultiplePermissionsState

@OptIn(ExperimentalPermissionsApi::class, ExperimentalMaterial3Api::class)
@Composable
fun MainScreen(
    viewModel: MainViewModel = hiltViewModel()
) {
    val connectionState by viewModel.connectionState.collectAsState()
    val workoutState by viewModel.workoutState.collectAsState()
    val currentMetric by viewModel.currentMetric.collectAsState()
    val workoutParameters by viewModel.workoutParameters.collectAsState()

    // Request BLE permissions
    val permissions = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
        listOf(
            Manifest.permission.BLUETOOTH_SCAN,
            Manifest.permission.BLUETOOTH_CONNECT,
            Manifest.permission.ACCESS_FINE_LOCATION
        )
    } else {
        listOf(
            Manifest.permission.BLUETOOTH,
            Manifest.permission.BLUETOOTH_ADMIN,
            Manifest.permission.ACCESS_FINE_LOCATION
        )
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Vitruvian Control") },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer
                )
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(16.dp)
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Connection Status Card
            ConnectionStatusCard(
                connectionState = connectionState,
                onScan = { viewModel.startScanning() },
                onConnect = { address -> viewModel.connectToDevice(address) },
                onDisconnect = { viewModel.disconnect() }
            )

            // Workout Controls (only show when connected)
            if (connectionState is ConnectionState.Connected) {
                WorkoutControlsCard(
                    workoutState = workoutState,
                    workoutParameters = workoutParameters,
                    onParametersChange = { viewModel.updateWorkoutParameters(it) },
                    onStartWorkout = { viewModel.startWorkout() },
                    onStopWorkout = { viewModel.stopWorkout() }
                )

                // Live Metrics (only show during workout)
                if (workoutState == WorkoutState.Active && currentMetric != null) {
                    LiveMetricsCard(metric = currentMetric!!)
                }
            }
        }
    }
}

@Composable
fun ConnectionStatusCard(
    connectionState: ConnectionState,
    onScan: () -> Unit,
    onConnect: (String) -> Unit,
    onDisconnect: () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Text(
                text = "Connection",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )

            when (connectionState) {
                is ConnectionState.Disconnected -> {
                    Text("Not connected")
                    Button(
                        onClick = onScan,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Scan for Device")
                    }
                }
                is ConnectionState.Scanning -> {
                    Text("Scanning for devices...")
                    LinearProgressIndicator(modifier = Modifier.fillMaxWidth())
                }
                is ConnectionState.Connecting -> {
                    Text("Connecting...")
                    LinearProgressIndicator(modifier = Modifier.fillMaxWidth())
                }
                is ConnectionState.Connected -> {
                    Text("Connected to: ${connectionState.deviceName}")
                    Text(
                        text = "Address: ${connectionState.deviceAddress}",
                        style = MaterialTheme.typography.bodySmall
                    )
                    Button(
                        onClick = onDisconnect,
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.error
                        )
                    ) {
                        Text("Disconnect")
                    }
                }
                is ConnectionState.Error -> {
                    Text(
                        text = "Error: ${connectionState.message}",
                        color = MaterialTheme.colorScheme.error
                    )
                    Button(
                        onClick = onScan,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Retry")
                    }
                }
            }
        }
    }
}

@Composable
fun WorkoutControlsCard(
    workoutState: WorkoutState,
    workoutParameters: WorkoutParameters,
    onParametersChange: (WorkoutParameters) -> Unit,
    onStartWorkout: () -> Unit,
    onStopWorkout: () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Text(
                text = "Workout Settings",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )

            // Mode Selection
            Text("Mode: ${workoutParameters.mode.displayName}")

            // Weight Input
            OutlinedTextField(
                value = workoutParameters.weightPerCableKg.toString(),
                onValueChange = { value ->
                    value.toFloatOrNull()?.let { weight ->
                        onParametersChange(workoutParameters.copy(weightPerCableKg = weight))
                    }
                },
                label = { Text("Weight per cable (kg)") },
                modifier = Modifier.fillMaxWidth()
            )

            // Reps Input
            OutlinedTextField(
                value = workoutParameters.reps.toString(),
                onValueChange = { value ->
                    value.toIntOrNull()?.let { reps ->
                        onParametersChange(workoutParameters.copy(reps = reps))
                    }
                },
                label = { Text("Reps") },
                modifier = Modifier.fillMaxWidth()
            )

            // Just Lift Mode Toggle
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text("Just Lift Mode")
                Switch(
                    checked = workoutParameters.isJustLift,
                    onCheckedChange = { checked ->
                        onParametersChange(workoutParameters.copy(isJustLift = checked))
                    }
                )
            }

            // Workout State
            when (workoutState) {
                is WorkoutState.Idle -> {
                    Button(
                        onClick = onStartWorkout,
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.primary
                        )
                    ) {
                        Text("Start Workout")
                    }
                }
                is WorkoutState.Initializing -> {
                    Button(
                        onClick = {},
                        modifier = Modifier.fillMaxWidth(),
                        enabled = false
                    ) {
                        Text("Initializing...")
                    }
                }
                is WorkoutState.Active -> {
                    Button(
                        onClick = onStopWorkout,
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.error
                        )
                    ) {
                        Text("Stop Workout")
                    }
                }
                is WorkoutState.Completed -> {
                    Text("Workout Completed!")
                    Button(
                        onClick = onStartWorkout,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Start New Workout")
                    }
                }
                is WorkoutState.Error -> {
                    Text(
                        text = "Error: ${workoutState.message}",
                        color = MaterialTheme.colorScheme.error
                    )
                    Button(
                        onClick = onStartWorkout,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Retry")
                    }
                }
                else -> {}
            }
        }
    }
}

@Composable
fun LiveMetricsCard(metric: com.example.vitruvianredux.domain.model.WorkoutMetric) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.secondaryContainer
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Text(
                text = "Live Metrics",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                MetricDisplay(label = "Load A", value = "%.1f kg".format(metric.loadA))
                MetricDisplay(label = "Load B", value = "%.1f kg".format(metric.loadB))
            }

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                MetricDisplay(label = "Total", value = "%.1f kg".format(metric.totalLoad))
                MetricDisplay(label = "Position A", value = metric.positionA.toString())
            }
        }
    }
}

@Composable
fun MetricDisplay(label: String, value: String) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = label,
            style = MaterialTheme.typography.bodySmall
        )
        Text(
            text = value,
            style = MaterialTheme.typography.titleLarge,
            fontWeight = FontWeight.Bold
        )
    }
}

